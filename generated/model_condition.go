/*
Methods

This API exposes detectors for sensitive data in arbitrary string payloads.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Condition An inclusion condition within a condition set.
type Condition struct {
	// The minimum number of findings required in order for this detector to be reported.
	MinNumFindings *int32 `json:"minNumFindings,omitempty"`
	MinConfidence *Confidence `json:"minConfidence,omitempty"`
	Detector *Detector `json:"detector,omitempty"`
}

// NewCondition instantiates a new Condition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCondition() *Condition {
	this := Condition{}
	return &this
}

// NewConditionWithDefaults instantiates a new Condition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionWithDefaults() *Condition {
	this := Condition{}
	return &this
}

// GetMinNumFindings returns the MinNumFindings field value if set, zero value otherwise.
func (o *Condition) GetMinNumFindings() int32 {
	if o == nil || o.MinNumFindings == nil {
		var ret int32
		return ret
	}
	return *o.MinNumFindings
}

// GetMinNumFindingsOk returns a tuple with the MinNumFindings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition) GetMinNumFindingsOk() (*int32, bool) {
	if o == nil || o.MinNumFindings == nil {
		return nil, false
	}
	return o.MinNumFindings, true
}

// HasMinNumFindings returns a boolean if a field has been set.
func (o *Condition) HasMinNumFindings() bool {
	if o != nil && o.MinNumFindings != nil {
		return true
	}

	return false
}

// SetMinNumFindings gets a reference to the given int32 and assigns it to the MinNumFindings field.
func (o *Condition) SetMinNumFindings(v int32) {
	o.MinNumFindings = &v
}

// GetMinConfidence returns the MinConfidence field value if set, zero value otherwise.
func (o *Condition) GetMinConfidence() Confidence {
	if o == nil || o.MinConfidence == nil {
		var ret Confidence
		return ret
	}
	return *o.MinConfidence
}

// GetMinConfidenceOk returns a tuple with the MinConfidence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition) GetMinConfidenceOk() (*Confidence, bool) {
	if o == nil || o.MinConfidence == nil {
		return nil, false
	}
	return o.MinConfidence, true
}

// HasMinConfidence returns a boolean if a field has been set.
func (o *Condition) HasMinConfidence() bool {
	if o != nil && o.MinConfidence != nil {
		return true
	}

	return false
}

// SetMinConfidence gets a reference to the given Confidence and assigns it to the MinConfidence field.
func (o *Condition) SetMinConfidence(v Confidence) {
	o.MinConfidence = &v
}

// GetDetector returns the Detector field value if set, zero value otherwise.
func (o *Condition) GetDetector() Detector {
	if o == nil || o.Detector == nil {
		var ret Detector
		return ret
	}
	return *o.Detector
}

// GetDetectorOk returns a tuple with the Detector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition) GetDetectorOk() (*Detector, bool) {
	if o == nil || o.Detector == nil {
		return nil, false
	}
	return o.Detector, true
}

// HasDetector returns a boolean if a field has been set.
func (o *Condition) HasDetector() bool {
	if o != nil && o.Detector != nil {
		return true
	}

	return false
}

// SetDetector gets a reference to the given Detector and assigns it to the Detector field.
func (o *Condition) SetDetector(v Detector) {
	o.Detector = &v
}

func (o Condition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MinNumFindings != nil {
		toSerialize["minNumFindings"] = o.MinNumFindings
	}
	if o.MinConfidence != nil {
		toSerialize["minConfidence"] = o.MinConfidence
	}
	if o.Detector != nil {
		toSerialize["detector"] = o.Detector
	}
	return json.Marshal(toSerialize)
}

type NullableCondition struct {
	value *Condition
	isSet bool
}

func (v NullableCondition) Get() *Condition {
	return v.value
}

func (v *NullableCondition) Set(val *Condition) {
	v.value = val
	v.isSet = true
}

func (v NullableCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCondition(val *Condition) *NullableCondition {
	return &NullableCondition{value: val, isSet: true}
}

func (v NullableCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


