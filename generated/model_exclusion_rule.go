/*
Methods

This API exposes detectors for sensitive data in arbitrary string payloads.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ExclusionRule An exclusion rule removes findings that match the rule's given exlusion.
type ExclusionRule struct {
	MatchType *MatchType `json:"matchType,omitempty"`
	ExclusionType *ExclusionType `json:"exclusionType,omitempty"`
	Regex *Regex `json:"regex,omitempty"`
	WordList *WordList `json:"wordList,omitempty"`
}

// NewExclusionRule instantiates a new ExclusionRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExclusionRule() *ExclusionRule {
	this := ExclusionRule{}
	return &this
}

// NewExclusionRuleWithDefaults instantiates a new ExclusionRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExclusionRuleWithDefaults() *ExclusionRule {
	this := ExclusionRule{}
	return &this
}

// GetMatchType returns the MatchType field value if set, zero value otherwise.
func (o *ExclusionRule) GetMatchType() MatchType {
	if o == nil || o.MatchType == nil {
		var ret MatchType
		return ret
	}
	return *o.MatchType
}

// GetMatchTypeOk returns a tuple with the MatchType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExclusionRule) GetMatchTypeOk() (*MatchType, bool) {
	if o == nil || o.MatchType == nil {
		return nil, false
	}
	return o.MatchType, true
}

// HasMatchType returns a boolean if a field has been set.
func (o *ExclusionRule) HasMatchType() bool {
	if o != nil && o.MatchType != nil {
		return true
	}

	return false
}

// SetMatchType gets a reference to the given MatchType and assigns it to the MatchType field.
func (o *ExclusionRule) SetMatchType(v MatchType) {
	o.MatchType = &v
}

// GetExclusionType returns the ExclusionType field value if set, zero value otherwise.
func (o *ExclusionRule) GetExclusionType() ExclusionType {
	if o == nil || o.ExclusionType == nil {
		var ret ExclusionType
		return ret
	}
	return *o.ExclusionType
}

// GetExclusionTypeOk returns a tuple with the ExclusionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExclusionRule) GetExclusionTypeOk() (*ExclusionType, bool) {
	if o == nil || o.ExclusionType == nil {
		return nil, false
	}
	return o.ExclusionType, true
}

// HasExclusionType returns a boolean if a field has been set.
func (o *ExclusionRule) HasExclusionType() bool {
	if o != nil && o.ExclusionType != nil {
		return true
	}

	return false
}

// SetExclusionType gets a reference to the given ExclusionType and assigns it to the ExclusionType field.
func (o *ExclusionRule) SetExclusionType(v ExclusionType) {
	o.ExclusionType = &v
}

// GetRegex returns the Regex field value if set, zero value otherwise.
func (o *ExclusionRule) GetRegex() Regex {
	if o == nil || o.Regex == nil {
		var ret Regex
		return ret
	}
	return *o.Regex
}

// GetRegexOk returns a tuple with the Regex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExclusionRule) GetRegexOk() (*Regex, bool) {
	if o == nil || o.Regex == nil {
		return nil, false
	}
	return o.Regex, true
}

// HasRegex returns a boolean if a field has been set.
func (o *ExclusionRule) HasRegex() bool {
	if o != nil && o.Regex != nil {
		return true
	}

	return false
}

// SetRegex gets a reference to the given Regex and assigns it to the Regex field.
func (o *ExclusionRule) SetRegex(v Regex) {
	o.Regex = &v
}

// GetWordList returns the WordList field value if set, zero value otherwise.
func (o *ExclusionRule) GetWordList() WordList {
	if o == nil || o.WordList == nil {
		var ret WordList
		return ret
	}
	return *o.WordList
}

// GetWordListOk returns a tuple with the WordList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExclusionRule) GetWordListOk() (*WordList, bool) {
	if o == nil || o.WordList == nil {
		return nil, false
	}
	return o.WordList, true
}

// HasWordList returns a boolean if a field has been set.
func (o *ExclusionRule) HasWordList() bool {
	if o != nil && o.WordList != nil {
		return true
	}

	return false
}

// SetWordList gets a reference to the given WordList and assigns it to the WordList field.
func (o *ExclusionRule) SetWordList(v WordList) {
	o.WordList = &v
}

func (o ExclusionRule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MatchType != nil {
		toSerialize["matchType"] = o.MatchType
	}
	if o.ExclusionType != nil {
		toSerialize["exclusionType"] = o.ExclusionType
	}
	if o.Regex != nil {
		toSerialize["regex"] = o.Regex
	}
	if o.WordList != nil {
		toSerialize["wordList"] = o.WordList
	}
	return json.Marshal(toSerialize)
}

type NullableExclusionRule struct {
	value *ExclusionRule
	isSet bool
}

func (v NullableExclusionRule) Get() *ExclusionRule {
	return v.value
}

func (v *NullableExclusionRule) Set(val *ExclusionRule) {
	v.value = val
	v.isSet = true
}

func (v NullableExclusionRule) IsSet() bool {
	return v.isSet
}

func (v *NullableExclusionRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExclusionRule(val *ExclusionRule) *NullableExclusionRule {
	return &NullableExclusionRule{value: val, isSet: true}
}

func (v NullableExclusionRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExclusionRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


