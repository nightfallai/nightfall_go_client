/*
Methods

This API exposes detectors for sensitive data in arbitrary string payloads.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// DetectorType The type of detector.
type DetectorType string

// List of DetectorType
const (
	DETECTORTYPE_NIGHTFALL_DETECTOR DetectorType = "NIGHTFALL_DETECTOR"
	DETECTORTYPE_REGEX DetectorType = "REGEX"
	DETECTORTYPE_WORD_LIST DetectorType = "WORD_LIST"
)

var allowedDetectorTypeEnumValues = []DetectorType{
	"NIGHTFALL_DETECTOR",
	"REGEX",
	"WORD_LIST",
}

func (v *DetectorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DetectorType(value)
	for _, existing := range allowedDetectorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DetectorType", value)
}

// NewDetectorTypeFromValue returns a pointer to a valid DetectorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDetectorTypeFromValue(v string) (*DetectorType, error) {
	ev := DetectorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DetectorType: valid values are %v", v, allowedDetectorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DetectorType) IsValid() bool {
	for _, existing := range allowedDetectorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DetectorType value
func (v DetectorType) Ptr() *DetectorType {
	return &v
}

type NullableDetectorType struct {
	value *DetectorType
	isSet bool
}

func (v NullableDetectorType) Get() *DetectorType {
	return v.value
}

func (v *NullableDetectorType) Set(val *DetectorType) {
	v.value = val
	v.isSet = true
}

func (v NullableDetectorType) IsSet() bool {
	return v.isSet
}

func (v *NullableDetectorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDetectorType(val *DetectorType) *NullableDetectorType {
	return &NullableDetectorType{value: val, isSet: true}
}

func (v NullableDetectorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDetectorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

