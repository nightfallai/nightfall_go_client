/*
Methods

This API exposes detectors for sensitive data in arbitrary string payloads.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ContextRule A context rule adjusts the finding confidence based on surrounding context.
type ContextRule struct {
	Regex *Regex `json:"regex,omitempty"`
	Proximity *ContextRuleProximity `json:"proximity,omitempty"`
	ConfidenceAdjustment *ContextRuleConfidenceAdjustment `json:"confidenceAdjustment,omitempty"`
}

// NewContextRule instantiates a new ContextRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContextRule() *ContextRule {
	this := ContextRule{}
	return &this
}

// NewContextRuleWithDefaults instantiates a new ContextRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContextRuleWithDefaults() *ContextRule {
	this := ContextRule{}
	return &this
}

// GetRegex returns the Regex field value if set, zero value otherwise.
func (o *ContextRule) GetRegex() Regex {
	if o == nil || o.Regex == nil {
		var ret Regex
		return ret
	}
	return *o.Regex
}

// GetRegexOk returns a tuple with the Regex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContextRule) GetRegexOk() (*Regex, bool) {
	if o == nil || o.Regex == nil {
		return nil, false
	}
	return o.Regex, true
}

// HasRegex returns a boolean if a field has been set.
func (o *ContextRule) HasRegex() bool {
	if o != nil && o.Regex != nil {
		return true
	}

	return false
}

// SetRegex gets a reference to the given Regex and assigns it to the Regex field.
func (o *ContextRule) SetRegex(v Regex) {
	o.Regex = &v
}

// GetProximity returns the Proximity field value if set, zero value otherwise.
func (o *ContextRule) GetProximity() ContextRuleProximity {
	if o == nil || o.Proximity == nil {
		var ret ContextRuleProximity
		return ret
	}
	return *o.Proximity
}

// GetProximityOk returns a tuple with the Proximity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContextRule) GetProximityOk() (*ContextRuleProximity, bool) {
	if o == nil || o.Proximity == nil {
		return nil, false
	}
	return o.Proximity, true
}

// HasProximity returns a boolean if a field has been set.
func (o *ContextRule) HasProximity() bool {
	if o != nil && o.Proximity != nil {
		return true
	}

	return false
}

// SetProximity gets a reference to the given ContextRuleProximity and assigns it to the Proximity field.
func (o *ContextRule) SetProximity(v ContextRuleProximity) {
	o.Proximity = &v
}

// GetConfidenceAdjustment returns the ConfidenceAdjustment field value if set, zero value otherwise.
func (o *ContextRule) GetConfidenceAdjustment() ContextRuleConfidenceAdjustment {
	if o == nil || o.ConfidenceAdjustment == nil {
		var ret ContextRuleConfidenceAdjustment
		return ret
	}
	return *o.ConfidenceAdjustment
}

// GetConfidenceAdjustmentOk returns a tuple with the ConfidenceAdjustment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContextRule) GetConfidenceAdjustmentOk() (*ContextRuleConfidenceAdjustment, bool) {
	if o == nil || o.ConfidenceAdjustment == nil {
		return nil, false
	}
	return o.ConfidenceAdjustment, true
}

// HasConfidenceAdjustment returns a boolean if a field has been set.
func (o *ContextRule) HasConfidenceAdjustment() bool {
	if o != nil && o.ConfidenceAdjustment != nil {
		return true
	}

	return false
}

// SetConfidenceAdjustment gets a reference to the given ContextRuleConfidenceAdjustment and assigns it to the ConfidenceAdjustment field.
func (o *ContextRule) SetConfidenceAdjustment(v ContextRuleConfidenceAdjustment) {
	o.ConfidenceAdjustment = &v
}

func (o ContextRule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Regex != nil {
		toSerialize["regex"] = o.Regex
	}
	if o.Proximity != nil {
		toSerialize["proximity"] = o.Proximity
	}
	if o.ConfidenceAdjustment != nil {
		toSerialize["confidenceAdjustment"] = o.ConfidenceAdjustment
	}
	return json.Marshal(toSerialize)
}

type NullableContextRule struct {
	value *ContextRule
	isSet bool
}

func (v NullableContextRule) Get() *ContextRule {
	return v.value
}

func (v *NullableContextRule) Set(val *ContextRule) {
	v.value = val
	v.isSet = true
}

func (v NullableContextRule) IsSet() bool {
	return v.isSet
}

func (v *NullableContextRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContextRule(val *ContextRule) *NullableContextRule {
	return &NullableContextRule{value: val, isSet: true}
}

func (v NullableContextRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContextRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


