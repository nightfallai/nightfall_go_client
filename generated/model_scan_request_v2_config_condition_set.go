/*
Methods

This API exposes detectors for sensitive data in arbitrary string payloads.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ScanRequestV2ConfigConditionSet A conditionSet contains a list of conditions with which you wish to scan the request payload.
type ScanRequestV2ConfigConditionSet struct {
	// Evaluate whether the conditions satisfy ANY or ALL criteria. Empty value defaults to ANY.
	LogicalOp *string `json:"logicalOp,omitempty"`
	// A list of conditions.
	Conditions *[]Condition `json:"conditions,omitempty"`
}

// NewScanRequestV2ConfigConditionSet instantiates a new ScanRequestV2ConfigConditionSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScanRequestV2ConfigConditionSet() *ScanRequestV2ConfigConditionSet {
	this := ScanRequestV2ConfigConditionSet{}
	return &this
}

// NewScanRequestV2ConfigConditionSetWithDefaults instantiates a new ScanRequestV2ConfigConditionSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScanRequestV2ConfigConditionSetWithDefaults() *ScanRequestV2ConfigConditionSet {
	this := ScanRequestV2ConfigConditionSet{}
	return &this
}

// GetLogicalOp returns the LogicalOp field value if set, zero value otherwise.
func (o *ScanRequestV2ConfigConditionSet) GetLogicalOp() string {
	if o == nil || o.LogicalOp == nil {
		var ret string
		return ret
	}
	return *o.LogicalOp
}

// GetLogicalOpOk returns a tuple with the LogicalOp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanRequestV2ConfigConditionSet) GetLogicalOpOk() (*string, bool) {
	if o == nil || o.LogicalOp == nil {
		return nil, false
	}
	return o.LogicalOp, true
}

// HasLogicalOp returns a boolean if a field has been set.
func (o *ScanRequestV2ConfigConditionSet) HasLogicalOp() bool {
	if o != nil && o.LogicalOp != nil {
		return true
	}

	return false
}

// SetLogicalOp gets a reference to the given string and assigns it to the LogicalOp field.
func (o *ScanRequestV2ConfigConditionSet) SetLogicalOp(v string) {
	o.LogicalOp = &v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *ScanRequestV2ConfigConditionSet) GetConditions() []Condition {
	if o == nil || o.Conditions == nil {
		var ret []Condition
		return ret
	}
	return *o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanRequestV2ConfigConditionSet) GetConditionsOk() (*[]Condition, bool) {
	if o == nil || o.Conditions == nil {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *ScanRequestV2ConfigConditionSet) HasConditions() bool {
	if o != nil && o.Conditions != nil {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []Condition and assigns it to the Conditions field.
func (o *ScanRequestV2ConfigConditionSet) SetConditions(v []Condition) {
	o.Conditions = &v
}

func (o ScanRequestV2ConfigConditionSet) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LogicalOp != nil {
		toSerialize["logicalOp"] = o.LogicalOp
	}
	if o.Conditions != nil {
		toSerialize["conditions"] = o.Conditions
	}
	return json.Marshal(toSerialize)
}

type NullableScanRequestV2ConfigConditionSet struct {
	value *ScanRequestV2ConfigConditionSet
	isSet bool
}

func (v NullableScanRequestV2ConfigConditionSet) Get() *ScanRequestV2ConfigConditionSet {
	return v.value
}

func (v *NullableScanRequestV2ConfigConditionSet) Set(val *ScanRequestV2ConfigConditionSet) {
	v.value = val
	v.isSet = true
}

func (v NullableScanRequestV2ConfigConditionSet) IsSet() bool {
	return v.isSet
}

func (v *NullableScanRequestV2ConfigConditionSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScanRequestV2ConfigConditionSet(val *ScanRequestV2ConfigConditionSet) *NullableScanRequestV2ConfigConditionSet {
	return &NullableScanRequestV2ConfigConditionSet{value: val, isSet: true}
}

func (v NullableScanRequestV2ConfigConditionSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScanRequestV2ConfigConditionSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


