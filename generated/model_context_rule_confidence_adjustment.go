/*
Methods

This API exposes detectors for sensitive data in arbitrary string payloads.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ContextRuleConfidenceAdjustment The object containing the confidence level to adjust findings to.
type ContextRuleConfidenceAdjustment struct {
	FixedConfidence *Confidence `json:"fixedConfidence,omitempty"`
}

// NewContextRuleConfidenceAdjustment instantiates a new ContextRuleConfidenceAdjustment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContextRuleConfidenceAdjustment() *ContextRuleConfidenceAdjustment {
	this := ContextRuleConfidenceAdjustment{}
	return &this
}

// NewContextRuleConfidenceAdjustmentWithDefaults instantiates a new ContextRuleConfidenceAdjustment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContextRuleConfidenceAdjustmentWithDefaults() *ContextRuleConfidenceAdjustment {
	this := ContextRuleConfidenceAdjustment{}
	return &this
}

// GetFixedConfidence returns the FixedConfidence field value if set, zero value otherwise.
func (o *ContextRuleConfidenceAdjustment) GetFixedConfidence() Confidence {
	if o == nil || o.FixedConfidence == nil {
		var ret Confidence
		return ret
	}
	return *o.FixedConfidence
}

// GetFixedConfidenceOk returns a tuple with the FixedConfidence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContextRuleConfidenceAdjustment) GetFixedConfidenceOk() (*Confidence, bool) {
	if o == nil || o.FixedConfidence == nil {
		return nil, false
	}
	return o.FixedConfidence, true
}

// HasFixedConfidence returns a boolean if a field has been set.
func (o *ContextRuleConfidenceAdjustment) HasFixedConfidence() bool {
	if o != nil && o.FixedConfidence != nil {
		return true
	}

	return false
}

// SetFixedConfidence gets a reference to the given Confidence and assigns it to the FixedConfidence field.
func (o *ContextRuleConfidenceAdjustment) SetFixedConfidence(v Confidence) {
	o.FixedConfidence = &v
}

func (o ContextRuleConfidenceAdjustment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FixedConfidence != nil {
		toSerialize["fixedConfidence"] = o.FixedConfidence
	}
	return json.Marshal(toSerialize)
}

type NullableContextRuleConfidenceAdjustment struct {
	value *ContextRuleConfidenceAdjustment
	isSet bool
}

func (v NullableContextRuleConfidenceAdjustment) Get() *ContextRuleConfidenceAdjustment {
	return v.value
}

func (v *NullableContextRuleConfidenceAdjustment) Set(val *ContextRuleConfidenceAdjustment) {
	v.value = val
	v.isSet = true
}

func (v NullableContextRuleConfidenceAdjustment) IsSet() bool {
	return v.isSet
}

func (v *NullableContextRuleConfidenceAdjustment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContextRuleConfidenceAdjustment(val *ContextRuleConfidenceAdjustment) *NullableContextRuleConfidenceAdjustment {
	return &NullableContextRuleConfidenceAdjustment{value: val, isSet: true}
}

func (v NullableContextRuleConfidenceAdjustment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContextRuleConfidenceAdjustment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


