/*
Methods

This API exposes detectors for sensitive data in arbitrary string payloads.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// WordList The WordList object for wordList detector and exclusion rules.
type WordList struct {
	// A list of words for wordList.
	Values *[]string `json:"values,omitempty"`
	// The case sensitivity for words in the wordList. If false, ignore the case of findings.
	IsCaseSensitive *bool `json:"isCaseSensitive,omitempty"`
}

// NewWordList instantiates a new WordList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWordList() *WordList {
	this := WordList{}
	return &this
}

// NewWordListWithDefaults instantiates a new WordList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWordListWithDefaults() *WordList {
	this := WordList{}
	return &this
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *WordList) GetValues() []string {
	if o == nil || o.Values == nil {
		var ret []string
		return ret
	}
	return *o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WordList) GetValuesOk() (*[]string, bool) {
	if o == nil || o.Values == nil {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *WordList) HasValues() bool {
	if o != nil && o.Values != nil {
		return true
	}

	return false
}

// SetValues gets a reference to the given []string and assigns it to the Values field.
func (o *WordList) SetValues(v []string) {
	o.Values = &v
}

// GetIsCaseSensitive returns the IsCaseSensitive field value if set, zero value otherwise.
func (o *WordList) GetIsCaseSensitive() bool {
	if o == nil || o.IsCaseSensitive == nil {
		var ret bool
		return ret
	}
	return *o.IsCaseSensitive
}

// GetIsCaseSensitiveOk returns a tuple with the IsCaseSensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WordList) GetIsCaseSensitiveOk() (*bool, bool) {
	if o == nil || o.IsCaseSensitive == nil {
		return nil, false
	}
	return o.IsCaseSensitive, true
}

// HasIsCaseSensitive returns a boolean if a field has been set.
func (o *WordList) HasIsCaseSensitive() bool {
	if o != nil && o.IsCaseSensitive != nil {
		return true
	}

	return false
}

// SetIsCaseSensitive gets a reference to the given bool and assigns it to the IsCaseSensitive field.
func (o *WordList) SetIsCaseSensitive(v bool) {
	o.IsCaseSensitive = &v
}

func (o WordList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Values != nil {
		toSerialize["values"] = o.Values
	}
	if o.IsCaseSensitive != nil {
		toSerialize["isCaseSensitive"] = o.IsCaseSensitive
	}
	return json.Marshal(toSerialize)
}

type NullableWordList struct {
	value *WordList
	isSet bool
}

func (v NullableWordList) Get() *WordList {
	return v.value
}

func (v *NullableWordList) Set(val *WordList) {
	v.value = val
	v.isSet = true
}

func (v NullableWordList) IsSet() bool {
	return v.isSet
}

func (v *NullableWordList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWordList(val *WordList) *NullableWordList {
	return &NullableWordList{value: val, isSet: true}
}

func (v NullableWordList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWordList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


