/*
Methods

This API exposes detectors for sensitive data in arbitrary string payloads.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ExclusionType The type of exclusion rule.
type ExclusionType string

// List of ExclusionType
const (
	EXCLUSIONTYPE_REGEX ExclusionType = "REGEX"
	EXCLUSIONTYPE_WORD_LIST ExclusionType = "WORD_LIST"
)

// All allowed values of ExclusionType enum
var AllowedExclusionTypeEnumValues = []ExclusionType{
	"REGEX",
	"WORD_LIST",
}

func (v *ExclusionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExclusionType(value)
	for _, existing := range AllowedExclusionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExclusionType", value)
}

// NewExclusionTypeFromValue returns a pointer to a valid ExclusionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExclusionTypeFromValue(v string) (*ExclusionType, error) {
	ev := ExclusionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExclusionType: valid values are %v", v, AllowedExclusionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExclusionType) IsValid() bool {
	for _, existing := range AllowedExclusionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExclusionType value
func (v ExclusionType) Ptr() *ExclusionType {
	return &v
}

type NullableExclusionType struct {
	value *ExclusionType
	isSet bool
}

func (v NullableExclusionType) Get() *ExclusionType {
	return v.value
}

func (v *NullableExclusionType) Set(val *ExclusionType) {
	v.value = val
	v.isSet = true
}

func (v NullableExclusionType) IsSet() bool {
	return v.isSet
}

func (v *NullableExclusionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExclusionType(val *ExclusionType) *NullableExclusionType {
	return &NullableExclusionType{value: val, isSet: true}
}

func (v NullableExclusionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExclusionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

