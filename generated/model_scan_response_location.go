/*
Methods

This API exposes detectors for sensitive data in arbitrary string payloads.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ScanResponseLocation struct for ScanResponseLocation
type ScanResponseLocation struct {
	ByteRange *ScanResponseLocationByteRange `json:"byteRange,omitempty"`
	UnicodeRange *ScanResponseLocationUnicodeRange `json:"unicodeRange,omitempty"`
}

// NewScanResponseLocation instantiates a new ScanResponseLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScanResponseLocation() *ScanResponseLocation {
	this := ScanResponseLocation{}
	return &this
}

// NewScanResponseLocationWithDefaults instantiates a new ScanResponseLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScanResponseLocationWithDefaults() *ScanResponseLocation {
	this := ScanResponseLocation{}
	return &this
}

// GetByteRange returns the ByteRange field value if set, zero value otherwise.
func (o *ScanResponseLocation) GetByteRange() ScanResponseLocationByteRange {
	if o == nil || o.ByteRange == nil {
		var ret ScanResponseLocationByteRange
		return ret
	}
	return *o.ByteRange
}

// GetByteRangeOk returns a tuple with the ByteRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanResponseLocation) GetByteRangeOk() (*ScanResponseLocationByteRange, bool) {
	if o == nil || o.ByteRange == nil {
		return nil, false
	}
	return o.ByteRange, true
}

// HasByteRange returns a boolean if a field has been set.
func (o *ScanResponseLocation) HasByteRange() bool {
	if o != nil && o.ByteRange != nil {
		return true
	}

	return false
}

// SetByteRange gets a reference to the given ScanResponseLocationByteRange and assigns it to the ByteRange field.
func (o *ScanResponseLocation) SetByteRange(v ScanResponseLocationByteRange) {
	o.ByteRange = &v
}

// GetUnicodeRange returns the UnicodeRange field value if set, zero value otherwise.
func (o *ScanResponseLocation) GetUnicodeRange() ScanResponseLocationUnicodeRange {
	if o == nil || o.UnicodeRange == nil {
		var ret ScanResponseLocationUnicodeRange
		return ret
	}
	return *o.UnicodeRange
}

// GetUnicodeRangeOk returns a tuple with the UnicodeRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanResponseLocation) GetUnicodeRangeOk() (*ScanResponseLocationUnicodeRange, bool) {
	if o == nil || o.UnicodeRange == nil {
		return nil, false
	}
	return o.UnicodeRange, true
}

// HasUnicodeRange returns a boolean if a field has been set.
func (o *ScanResponseLocation) HasUnicodeRange() bool {
	if o != nil && o.UnicodeRange != nil {
		return true
	}

	return false
}

// SetUnicodeRange gets a reference to the given ScanResponseLocationUnicodeRange and assigns it to the UnicodeRange field.
func (o *ScanResponseLocation) SetUnicodeRange(v ScanResponseLocationUnicodeRange) {
	o.UnicodeRange = &v
}

func (o ScanResponseLocation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ByteRange != nil {
		toSerialize["byteRange"] = o.ByteRange
	}
	if o.UnicodeRange != nil {
		toSerialize["unicodeRange"] = o.UnicodeRange
	}
	return json.Marshal(toSerialize)
}

type NullableScanResponseLocation struct {
	value *ScanResponseLocation
	isSet bool
}

func (v NullableScanResponseLocation) Get() *ScanResponseLocation {
	return v.value
}

func (v *NullableScanResponseLocation) Set(val *ScanResponseLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableScanResponseLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableScanResponseLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScanResponseLocation(val *ScanResponseLocation) *NullableScanResponseLocation {
	return &NullableScanResponseLocation{value: val, isSet: true}
}

func (v NullableScanResponseLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScanResponseLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


