/*
Methods

This API exposes detectors for sensitive data in arbitrary string payloads.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Regex The regex object for the regex detector, context rules, and exclusion rules.
type Regex struct {
	// The regex pattern to match on.
	Pattern *string `json:"pattern,omitempty"`
	// The case sensitivity for the regex pattern.
	IsCaseSensitive *bool `json:"isCaseSensitive,omitempty"`
}

// NewRegex instantiates a new Regex object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegex() *Regex {
	this := Regex{}
	return &this
}

// NewRegexWithDefaults instantiates a new Regex object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegexWithDefaults() *Regex {
	this := Regex{}
	return &this
}

// GetPattern returns the Pattern field value if set, zero value otherwise.
func (o *Regex) GetPattern() string {
	if o == nil || o.Pattern == nil {
		var ret string
		return ret
	}
	return *o.Pattern
}

// GetPatternOk returns a tuple with the Pattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Regex) GetPatternOk() (*string, bool) {
	if o == nil || o.Pattern == nil {
		return nil, false
	}
	return o.Pattern, true
}

// HasPattern returns a boolean if a field has been set.
func (o *Regex) HasPattern() bool {
	if o != nil && o.Pattern != nil {
		return true
	}

	return false
}

// SetPattern gets a reference to the given string and assigns it to the Pattern field.
func (o *Regex) SetPattern(v string) {
	o.Pattern = &v
}

// GetIsCaseSensitive returns the IsCaseSensitive field value if set, zero value otherwise.
func (o *Regex) GetIsCaseSensitive() bool {
	if o == nil || o.IsCaseSensitive == nil {
		var ret bool
		return ret
	}
	return *o.IsCaseSensitive
}

// GetIsCaseSensitiveOk returns a tuple with the IsCaseSensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Regex) GetIsCaseSensitiveOk() (*bool, bool) {
	if o == nil || o.IsCaseSensitive == nil {
		return nil, false
	}
	return o.IsCaseSensitive, true
}

// HasIsCaseSensitive returns a boolean if a field has been set.
func (o *Regex) HasIsCaseSensitive() bool {
	if o != nil && o.IsCaseSensitive != nil {
		return true
	}

	return false
}

// SetIsCaseSensitive gets a reference to the given bool and assigns it to the IsCaseSensitive field.
func (o *Regex) SetIsCaseSensitive(v bool) {
	o.IsCaseSensitive = &v
}

func (o Regex) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Pattern != nil {
		toSerialize["pattern"] = o.Pattern
	}
	if o.IsCaseSensitive != nil {
		toSerialize["isCaseSensitive"] = o.IsCaseSensitive
	}
	return json.Marshal(toSerialize)
}

type NullableRegex struct {
	value *Regex
	isSet bool
}

func (v NullableRegex) Get() *Regex {
	return v.value
}

func (v *NullableRegex) Set(val *Regex) {
	v.value = val
	v.isSet = true
}

func (v NullableRegex) IsSet() bool {
	return v.isSet
}

func (v *NullableRegex) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegex(val *Regex) *NullableRegex {
	return &NullableRegex{value: val, isSet: true}
}

func (v NullableRegex) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegex) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


