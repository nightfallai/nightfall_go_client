/*
Methods

This API exposes detectors for sensitive data in arbitrary string payloads.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ScanRequestV2 The request body of the /v2/scan endpoint
type ScanRequestV2 struct {
	Config *ScanRequestV2Config `json:"config,omitempty"`
	// The text sample(s) you wish to scan. This data is passed as a string list, so you may choose to segment your text into multiple items for better granularity. The aggregate size of your text (summed across all items in the list) must not exceed 500 KB for any individual request, and the number of items in that list may not exceed 50,000.
	Payload *[]string `json:"payload,omitempty"`
}

// NewScanRequestV2 instantiates a new ScanRequestV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScanRequestV2() *ScanRequestV2 {
	this := ScanRequestV2{}
	return &this
}

// NewScanRequestV2WithDefaults instantiates a new ScanRequestV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScanRequestV2WithDefaults() *ScanRequestV2 {
	this := ScanRequestV2{}
	return &this
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *ScanRequestV2) GetConfig() ScanRequestV2Config {
	if o == nil || o.Config == nil {
		var ret ScanRequestV2Config
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanRequestV2) GetConfigOk() (*ScanRequestV2Config, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *ScanRequestV2) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given ScanRequestV2Config and assigns it to the Config field.
func (o *ScanRequestV2) SetConfig(v ScanRequestV2Config) {
	o.Config = &v
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *ScanRequestV2) GetPayload() []string {
	if o == nil || o.Payload == nil {
		var ret []string
		return ret
	}
	return *o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanRequestV2) GetPayloadOk() (*[]string, bool) {
	if o == nil || o.Payload == nil {
		return nil, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *ScanRequestV2) HasPayload() bool {
	if o != nil && o.Payload != nil {
		return true
	}

	return false
}

// SetPayload gets a reference to the given []string and assigns it to the Payload field.
func (o *ScanRequestV2) SetPayload(v []string) {
	o.Payload = &v
}

func (o ScanRequestV2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	if o.Payload != nil {
		toSerialize["payload"] = o.Payload
	}
	return json.Marshal(toSerialize)
}

type NullableScanRequestV2 struct {
	value *ScanRequestV2
	isSet bool
}

func (v NullableScanRequestV2) Get() *ScanRequestV2 {
	return v.value
}

func (v *NullableScanRequestV2) Set(val *ScanRequestV2) {
	v.value = val
	v.isSet = true
}

func (v NullableScanRequestV2) IsSet() bool {
	return v.isSet
}

func (v *NullableScanRequestV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScanRequestV2(val *ScanRequestV2) *NullableScanRequestV2 {
	return &NullableScanRequestV2{value: val, isSet: true}
}

func (v NullableScanRequestV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScanRequestV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


